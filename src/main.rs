mod substring_cat;
mod histogram_rectangle;
mod maximal_rectangle;
mod stock;
mod longest_increasing_path;
mod minimum_window_substring;
mod shortest_palindrome;
mod sliding_window_maximum;
mod count_of_range_sum;
mod split_array_largest_sum;
mod palindrome_partitioning;
mod find_min;
mod find_min_duplicates;
mod min_stack;
mod median_finder;
mod palindrome_pairs;
mod reverse_pairs;
mod sliding_puzzle;
mod sliding_window_median;
mod palindrome_partitioning_iii;
mod min_insertions_to_make_palindrome;
mod two_sum;
mod word_ladder;
mod permutation_sequence;
mod nth_magical_number;
mod candy;
mod longest_valid_parentheses;
mod kth_smallest_pair_distance;
mod longest_duplicate_substring;
mod max_points_on_line;
mod stock_iv;
mod max_array_distance;
mod serialize_and_deserialize_binary_tree;
mod max_points_with_cost;
mod stone_game_ii;
mod strange_printer;
mod max_score_formed_by_letters;
mod stone_game_iii;
mod jump_game_v;
mod distinct_subsequences;
mod binary_tree_cameras;
mod reducing_dishes;
mod max_dot_product_of_two_subsequences;
mod shortest_common_super_sequence;
mod no_consecutive_ones;
mod stone_game_iv;
mod minimum_cost_to_cut_stick;
mod stone_game_viii;
mod minimum_number_of_increments_on_subarrays_to_form_a_target_array;
mod count_palindromic_subsequences;
mod maximum_sum_of_3_non_overlapping_subarrays;
mod frog_jump;
mod russian_doll_envelopes;
mod russian_doll_slow;

use russian_doll_envelopes::Solution;

fn main() {
    let v = [[1,1],[1,1],[1,1]];
    println!("{}", Solution::max_envelopes(v.iter().map(|a| a.to_vec()).collect()));
    // let nums = [0,1,2,3,4,8,9,11];
    // println!("{:?}", Solution::can_cross(nums.to_vec()));
    // let stones = [25,-35,-37,4,34,43,16,-33,0,-17,-31,-42,-42,38,12,-5,-43,-10,-37,12];
    // println!("{}", stones[..stones.len() - 3].iter().sum::<i32>());
    // let stones = [2,-3,4,-5];
    // [-2, 4, -5]
    // println!("{}", Solution::stone_game_viii([-113, -10, -37, 12].to_vec()));
}